import os
import asyncio
import json
import logging
from typing import Dict
from environs import Env
from pyrogram import Client, errors
from pyrogram.errors import FloodWait
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
env = Env()
env.read_env(".env")

API_ID = env.int("APP_API_ID")
API_HASH = env.str("APP_API_HASH")
BOT_TOKEN = env.str("BOT_TOKEN")
LOGIN = env.str("LOGIN")


class BroadcastBot:

    def __init__(self):

        self.video_files = [
            "videos/video1.mp4",
            "videos/video2.mp4",
            "videos/video3.mp4",
            "videos/video4.mp4",
            "videos/video5.mp4"
        ]
        self.userbot = Client(
            "testme",
            api_id=API_ID,
            api_hash=API_HASH
        )
        self.ptb_app = Application.builder().token(BOT_TOKEN).build()
        self.current_tasks: Dict[int, asyncio.Task] = {}

        self.main_menu = ReplyKeyboardMarkup([
            [KeyboardButton("üë§ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")],
            [KeyboardButton("üì© –†–æ–∑—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º")],
            [KeyboardButton("üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
        ], resize_keyboard=True)

    async def load_config(self):
        try:
            with open("config.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {
                "contacts": [],
                "groups": [],
                "message": "",
                "interval": 5,
                "max_per_minute": 20
            }

    async def save_config(self, config):
        with open("config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

    async def verify_contact(self, contact):
        try:
            user = await self.userbot.get_users(contact)
            return user.id
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact}: {e}")
            return None

    async def send_to_users_task(self, user_id, update: Update):
        try:
            config = await self.load_config()
            success = errors = 0
            total_contacts = len(config["contacts"])
            total_videos = len(self.video_files)
            total_messages = total_contacts * total_videos

            start_time = asyncio.get_event_loop().time()
            estimated_total_time = (total_messages * config["interval"]) / 60

            await update.message.reply_text(
                f"üîç –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É {total_videos} –≤—ñ–¥–µ–æ –¥–ª—è {total_contacts} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤\n"
                f"üìä –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_messages}\n"
                f"‚è≥ –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {estimated_total_time:.1f} —Ö–≤"
            )

            for contact in config["contacts"]:
                if user_id not in self.current_tasks:
                    break

                try:
                    contact_id = await self.verify_contact(contact)
                    if not contact_id:
                        errors += 1
                        continue

                    for video_file in self.video_files:
                        video_path = os.path.abspath(video_file)
                        if not os.path.exists(video_path):
                            await update.message.reply_text(f"‚ùå –í—ñ–¥–µ–æ—Ñ–∞–π–ª {video_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                            continue

                        await self.userbot.send_video_note(
                            chat_id=contact_id,
                            video_note=video_path
                        )
                        success += 1
                        await asyncio.sleep(config["interval"])

                except FloodWait as e:
                    wait = e.value
                    await update.message.reply_text(f"‚è≥ –ü–∞—É–∑–∞ {wait} —Å–µ–∫...")
                    await asyncio.sleep(wait)
                except Exception as e:
                    errors += 1
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
                    await asyncio.sleep(5)

            await update.message.reply_text(
                f"üéâ –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {errors}",
                reply_markup=self.main_menu
            )

        except Exception as e:
            logging.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            await update.message.reply_text("‚ùå –ü—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!")
        finally:
            if user_id in self.current_tasks:
                del self.current_tasks[user_id]

    async def send_to_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id

        if user_id in self.current_tasks:
            await update.message.reply_text("‚ö† –£ –≤–∞—Å –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞!", reply_markup=self.main_menu)
            return

        config = await self.load_config()
        if not config["contacts"]:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!", reply_markup=self.main_menu)
            return

        self.current_tasks[user_id] = asyncio.create_task(
            self.send_to_users_task(user_id, update)
        )

        await update.message.reply_text(
            "‚è≥ –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É... (/cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è)",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/cancel")]], resize_keyboard=True)
        )

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        if user_id in self.current_tasks:
            self.current_tasks[user_id].cancel()
            del self.current_tasks[user_id]
            await update.message.reply_text("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ!", reply_markup=self.main_menu)
        else:
            await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á!", reply_markup=self.main_menu)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—ñ–¥–µ–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.",
            reply_markup=self.main_menu
        )

    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.ptb_app.add_handler(CommandHandler("start", self.start))
        self.ptb_app.add_handler(CommandHandler("cancel", self.cancel))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–æ–∑—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º"
        self.ptb_app.add_handler(MessageHandler(
            filters.Regex("^üì© –†–æ–∑—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º$"),
            self.send_to_users
        ))

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        await self.userbot.start()
        await self.setup_handlers()

        try:
            await self.ptb_app.initialize()
            await self.ptb_app.start()
            await self.ptb_app.updater.start_polling()

            logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
            while True:
                await asyncio.sleep(1)

        except asyncio.CancelledError:
            pass
        except Exception as e:
            logging.critical(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        await self.ptb_app.stop()
        await self.userbot.stop()
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")


async def main():
    bot = BroadcastBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        await bot.shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")