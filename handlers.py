from pyrogram.errors import FloodWait
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from pyrogram import Client, errors
import json
import asyncio
from typing import Dict
from environs import Env
import logging
import os

env = Env()
env.read_env("config.env")

API_ID = env.int("APP_API_ID")
API_HASH = env.str("APP_API_HASH")
BOT_TOKEN = env.str("BOT_TOKEN")
LOGIN = env.str("LOGIN")

video_path = "video.mp4"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
userbot = Client(
    name=LOGIN,
    api_id=API_ID,
    api_hash=API_HASH
)
ptb_app = Application.builder().token(BOT_TOKEN).build()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
current_tasks: Dict[int, asyncio.Task] = {}
main_menu = ReplyKeyboardMarkup([
    [KeyboardButton("‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"), KeyboardButton("‚è± –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª")],
    [KeyboardButton("üë§ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"), KeyboardButton("üë• –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø")],
    [KeyboardButton("üì© –†–æ–∑—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º"), KeyboardButton("üì¢ –†–æ–∑—ñ—Å–ª–∞—Ç–∏ —É –≥—Ä—É–ø–∏")],
    [KeyboardButton("üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
], resize_keyboard=True)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
SET_MESSAGE, SET_INTERVAL = range(2)
SETUP_CONTACTS, SETUP_GROUPS = range(2, 4)


async def load_config():
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return {
            "contacts": [],
            "groups": [],
            "message": "",
            "interval": 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        }


async def save_config(config):
    with open("config.json", "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)


async def verify_group_access(group_id):
    try:
        chat = await userbot.get_chat(group_id)
        if not chat.permissions.can_send_messages:
            print(f"–ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ —É –≥—Ä—É–ø—ñ {group_id}")
            return False
        return True
    except errors.PeerIdInvalid:
        print(f"–ë–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏ {group_id}")
        return False
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥—Ä—É–ø–∏ {group_id}: {e}")
        return False



async def send_to_groups_task(user_id, update: Update):
    config = await load_config()
    groups = config["groups"]
    message = config["message"]
    interval = config["interval"]

    success = 0
    errors_count = 0

    for group in groups:
        if not current_tasks.get(user_id):
            break

        try:
            if isinstance(group, int) and group < 0 and abs(group) > 1000000000000:
                group_id = group
            elif isinstance(group, str) and group.startswith("-100"):
                group_id = int(group)
            else:
                await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–∏: {group}")
                print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–∏: {group}")
                continue

            if await verify_group_access(group_id):
                await userbot.send_message(group_id, message)
                success += 1
                await asyncio.sleep(interval)
        except Exception as e:
            errors_count += 1
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ {group}: {e}")

    if user_id in current_tasks:
        del current_tasks[user_id]
        await update.message.reply_text(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –≥—Ä—É–ø–∞–º:\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {errors_count}",
            reply_markup=main_menu
        )


async def send_to_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = await load_config()
    contacts = config.get("contacts", [])
    video_path = os.path.abspath("video.mp4")

    if not os.path.isfile(video_path):
        await update.message.reply_text("‚ùå –í—ñ–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_menu)
        return

    success = 0
    failed = 0

    for contact in contacts:
        try:
            await userbot.send_video_note(contact, video_path)
            success += 1
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {contact}: {e}")
            failed += 1

    await update.message.reply_text(
        f"üìä –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n‚ùå –ü–æ–º–∏–ª–∫–∏: {failed}",
        reply_markup=main_menu
    )






async def send_to_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in current_tasks:
        await update.message.reply_text("‚ö† –£ –≤–∞—Å –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞!", reply_markup=main_menu)
        return

    config = await load_config()
    if not config["groups"]:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø –ø–æ—Ä–æ–∂–Ω—ñ–π!", reply_markup=main_menu)
        return
    if not config["message"]:
        await update.message.reply_text("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ!", reply_markup=main_menu)
        return

    current_tasks[user_id] = asyncio.create_task(send_to_groups_task(user_id, update))
    await update.message.reply_text(
        "‚è≥ –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –≥—Ä—É–ø–∞–º...\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: /cancel",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/cancel")]], resize_keyboard=True)
    )


async def view_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = await load_config()

    contacts_count = len(config["contacts"])
    groups_count = len(config["groups"])
    message_preview = config["message"][:100] + "..." if len(config["message"]) > 100 else config["message"]
    interval = config["interval"]

    contacts_time = contacts_count * interval / 60
    groups_time = groups_count * interval / 60

    await update.message.reply_text(
        f"‚öô –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"
        f"üìÑ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{message_preview}\n\n"
        f"‚è± –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥\n\n"
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contacts_count}\n"
        f"‚è≥ –ß–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {contacts_time:.1f} —Ö–≤\n\n"
        f"üë• –ì—Ä—É–ø–∏: {groups_count}\n"
        f"‚è≥ –ß–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {groups_time:.1f} —Ö–≤",
        reply_markup=main_menu
    )


async def set_message_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SET_MESSAGE


async def set_message_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = await load_config()
    config["message"] = update.message.text
    await save_config(config)

    await update.message.reply_text(
        "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!",
        reply_markup=main_menu
    )
    return ConversationHandler.END


async def set_interval_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚è± –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (—É —Å–µ–∫—É–Ω–¥–∞—Ö –º—ñ–Ω. 10): \n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: /cancel",
        reply_markup=ReplyKeyboardRemove()
    )
    return SET_INTERVAL


async def set_interval_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        interval = int(update.message.text)
        if interval < 10:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 10")
        return SET_INTERVAL

    config = await load_config()
    config["interval"] = interval
    await save_config(config)

    await update.message.reply_text(
        f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {interval} —Å–µ–∫—É–Ω–¥",
        reply_markup=main_menu
    )
    return ConversationHandler.END


async def setup_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë§ –í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (@username –∞–±–æ ID):\n"
        "–ü—Ä–∏–∫–ª–∞–¥: @user1, 123456789, user2",
        reply_markup=ReplyKeyboardRemove()
    )
    return SETUP_CONTACTS


async def save_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contacts = [u.strip() for u in update.message.text.split(",") if u.strip()]
    config = await load_config()
    config["contacts"] = contacts
    await save_config(config)

    await update.message.reply_text(
        f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤!",
        reply_markup=main_menu
    )
    return ConversationHandler.END


async def setup_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë• –í–≤–µ–¥—ñ—Ç—å ID –≥—Ä—É–ø —á–µ—Ä–µ–∑ –∫–æ–º—É (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ -100...):\n"
        "–ü—Ä–∏–∫–ª–∞–¥: -100123456789, -100987654321",
        reply_markup=ReplyKeyboardRemove()
    )
    return SETUP_GROUPS


async def save_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    groups = []
    for g in update.message.text.split(","):
        g = g.strip()
        if g.startswith("-100") and g[4:].isdigit():
            groups.append(int(g))
        elif g.isdigit() and len(g) > 9:
            groups.append(-1000000000000 + int(g))

    config = await load_config()
    config["groups"] = groups
    await save_config(config)

    await update.message.reply_text(
        f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(groups)} –≥—Ä—É–ø!",
        reply_markup=main_menu
    )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id in current_tasks:
        task = current_tasks[user_id]
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass
        del current_tasks[user_id]
        await update.message.reply_text("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ!", reply_markup=main_menu)
        return ConversationHandler.END

    await update.message.reply_text(
        "‚ùå –ü–æ—Ç–æ—á–Ω—É –¥—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ!",
        reply_markup=main_menu
    )
    return ConversationHandler.END


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in current_tasks:
        await update.message.reply_text("üü¢ –†–æ–∑—Å–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: /cancel", reply_markup=main_menu)
    else:
        await update.message.reply_text("üî¥ –†–æ–∑—Å–∏–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", reply_markup=main_menu)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é!\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_menu
    )


async def main():
    await userbot.start()

    ptb_app.add_handler(CommandHandler("start", start))
    ptb_app.add_handler(CommandHandler("cancel", cancel))

    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    ptb_app.add_handler(MessageHandler(filters.Regex("^üì© –†–æ–∑—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º$"), send_to_users))
    ptb_app.add_handler(MessageHandler(filters.Regex("^üì¢ –†–æ–∑—ñ—Å–ª–∞—Ç–∏ —É –≥—Ä—É–ø–∏$"), send_to_groups))
    ptb_app.add_handler(MessageHandler(filters.Regex("^üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è$"), view_settings))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    message_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è$"), set_message_start)],
        states={
            SET_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_message_save)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    interval_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚è± –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª$"), set_interval_start)],
        states={
            SET_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_interval_save)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    contacts_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üë§ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤$"), setup_contacts)],
        states={
            SETUP_CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_contacts)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    groups_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üë• –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø$"), setup_groups)],
        states={
            SETUP_GROUPS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_groups)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    ptb_app.add_handler(message_handler)
    ptb_app.add_handler(interval_handler)
    ptb_app.add_handler(contacts_handler)
    ptb_app.add_handler(groups_handler)

    await ptb_app.initialize()
    await ptb_app.start()
    await ptb_app.updater.start_polling()

    print("ü§ñ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!")
    await asyncio.Event().wait()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏")